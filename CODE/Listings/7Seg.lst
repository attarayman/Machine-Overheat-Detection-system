C51 COMPILER V9.60.0.0   7SEG                                                              06/06/2021 12:30:02 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE 7SEG
OBJECT MODULE PLACED IN .\Objects\7Seg.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE 7Seg.c BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\7Seg.lst) TABS(2) OBJE
                    -CT(.\Objects\7Seg.obj)

line level    source

   1          #include "reg51.h"
   2          
   3          #define SegOne   0xfe     // define digit 4
   4          #define SegTwo   0xfd     // digit 3
   5          #define SegThree 0xfb     // digit 2
   6          #define SegFour  0xf7     // digit 1
   7          
   8          sbit rd_adc=P1^0;         // Read(RD) pin of ADC0804
   9          sbit wr_adc=P1^1;         // Write(WR) pin of ADC0804
  10          sbit intr_adc=P1^2;       // Interrupt(INTR) pin of ADC0804
  11          
  12          sbit set=P1^3;            // Set Button pin declaration
  13          sbit inc=P1^4;            // Increament Button pin declaration
  14          sbit dec=P1^5;            // Decreament Button pin declaration
  15          sbit reset=P1^6;          // Reset Button pin declaration
  16          
  17          sbit buzzer=P1^7;         // Buzzer  pin declaration
  18          
  19          
  20          
  21          
  22          // delay for seven segment display
  23          void DELAY_ms(unsigned int ms_Count) 
  24          {
  25   1          unsigned int i, j;
  26   1          for (i = 0; i < ms_Count; i++) 
  27   1          {
  28   2              for (j = 0; j < 100; j++);
  29   2          }
  30   1      }
  31          
  32          
  33          
  34          
  35          // delay for adc
  36          void delay(unsigned int z)
  37          {
  38   1        unsigned int p,q;
  39   1        for(p=0;p<z;p++)    //repeat for 'z' times
  40   1        {
  41   2          for(q=0;q<1375;q++);   //repeat for 1375 times
  42   2        }
  43   1      }
  44          
  45          
  46          
  47          
  48          // main function
  49          int main() 
  50          {
  51   1        
  52   1        
  53   1        // declaring 7 segment value and variable
  54   1         char hexvalue[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 
C51 COMPILER V9.60.0.0   7SEG                                                              06/06/2021 12:30:02 PAGE 2   

             -0x79, 0x71};
  55   1        int num, temp,i,st=0;               
  56   1        unsigned int value, cnt=20, set_value=00;   
  57   1        //declare end 
  58   1         
  59   1          
  60   1        P0=0xFF;    //make Port 0 as input port for ADC_data 
  61   1          
  62   1         
  63   1        while (1)   // continue loop
  64   1        {
  65   2          
  66   2          //send LOW to HIGH pulse on WR pin
  67   2          wr_adc=0;   
  68   2          delay(1);
  69   2          wr_adc=1;   
  70   2          //
  71   2          while(intr_adc==1);               //wait for End of Conversion
  72   2          rd_adc=0;                        //make RD = 0 to read the data from ADC0804
  73   2          value=P0;                       //copy ADC _data
  74   2          value = value*0.488;           //ADC ref
  75   2          
  76   2          
  77   2          for (i = 0; i < 100; i++)
  78   2          {
  79   3            
  80   3            num = value;                // value is copied to num 
  81   3            temp = num / 1000;         // for getting thousand'th digit 
  82   3            num = num % 1000;           
  83   3            P3 = SegOne;                // send _data to control pins
  84   3            P2 = hexvalue[temp];        //send _data to d0 to d7       
  85   3            DELAY_ms(1);             
  86   3      
  87   3            temp = num / 100;             // for getting hundred'th digit 
  88   3            num = num % 100;
  89   3            P3 = SegTwo; 
  90   3            P2 = hexvalue[temp];
  91   3            DELAY_ms(1);
  92   3      
  93   3            temp = num / 10;              // for getting tenth digit 
  94   3            P3 = SegThree;
  95   3            P2 = hexvalue[temp];
  96   3            DELAY_ms(1);
  97   3      
  98   3            temp = num % 10;              // 0'th digit
  99   3            P3 = SegFour;
 100   3            P2 = hexvalue[temp];
 101   3            DELAY_ms(1);   
 102   3            
 103   3          }
 104   2          
 105   2          
 106   2          rd_adc=1;     //make RD = 1 for the next cycle
 107   2          
 108   2          //adc part ends
 109   2          
 110   2          
 111   2          // buzzer
 112   2          if(value>=set_value)
 113   2          {
 114   3            
 115   3            buzzer=1;         // value >= set_value then buzzer will on
C51 COMPILER V9.60.0.0   7SEG                                                              06/06/2021 12:30:02 PAGE 3   

 116   3                  
 117   3          }
 118   2          
 119   2          else
 120   2          {
 121   3            
 122   3            buzzer=0;     // value < setvalue then buzzer is off
 123   3            
 124   3          }     
 125   2          
 126   2          // buzzer end
 127   2          
 128   2          
 129   2          
 130   2          // switch
 131   2          if(set==0)
 132   2          {
 133   3            
 134   3            st=1;             // if set button pressed  then st = 1
 135   3            
 136   3          }     
 137   2              
 138   2          
 139   2          while(st!=0)        // while st is equal to 1 
 140   2          {
 141   3            
 142   3            if(inc==0)
 143   3            {
 144   4              
 145   4              cnt++;          // increament
 146   4              
 147   4            }
 148   3            
 149   3            else if(dec==0)
 150   3            {
 151   4              
 152   4              cnt--;        // decreament
 153   4              
 154   4            }
 155   3                
 156   3            else if(reset==0)
 157   3            {
 158   4              
 159   4              set_value=00;     // set default value if reset button pressed 
 160   4              cnt=20;
 161   4              buzzer = 0;
 162   4              
 163   4            }
 164   3            
 165   3            
 166   3            for (i = 0; i < 100; i++)
 167   3            {
 168   4              
 169   4              num = cnt;
 170   4              temp = num / 1000;
 171   4              num = num % 1000;
 172   4              P3 = SegOne; 
 173   4              P2 = hexvalue[temp];               
 174   4              DELAY_ms(1);
 175   4      
 176   4              temp = num / 100;
 177   4              num = num % 100;
C51 COMPILER V9.60.0.0   7SEG                                                              06/06/2021 12:30:02 PAGE 4   

 178   4              P3 = SegTwo; 
 179   4              P2 = hexvalue[temp];
 180   4              DELAY_ms(1);
 181   4      
 182   4              temp = num / 10;
 183   4              P3 = SegThree;
 184   4              P2 = hexvalue[temp];
 185   4              DELAY_ms(1);
 186   4      
 187   4              temp = num % 10;
 188   4              P3 = SegFour;
 189   4              P2 = hexvalue[temp];
 190   4              DELAY_ms(1); 
 191   4              
 192   4            }
 193   3            
 194   3      
 195   3            if(set==0)    
 196   3            {
 197   4              
 198   4              set_value=cnt;
 199   4              st=0;
 200   4              
 201   4            } 
 202   3            
 203   3          } 
 204   2          
 205   2        }
 206   1        
 207   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    466    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      28
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
